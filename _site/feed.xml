<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mixing Time</title>
    <description>A blog on machine learning.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Training Weight Agnostic Neural Networks with Backpropagation</title>
        <description>&lt;!--
## Intro
--&gt;

&lt;p&gt;The recent paper &lt;a href=&quot;https://papers.nips.cc/paper/8777-weight-agnostic-neural-networks&quot;&gt;&lt;em&gt;Weight Agnostic Neural Networks&lt;/em&gt;&lt;/a&gt; by Gaier and Ha proposes a neural architecture search algorithm that evolves neural networks for solving learning tasks. The search algroithm is inspired by &lt;a href=&quot;http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf&quot;&gt;NEAT&lt;/a&gt;, a popular neuroevolution algorithm. But instead of searching for weight values and network topologies simultaneously as done in NEAT, the WANN evolution procedure searches only for network topologies. Each topology in the search phase is evaluated by the average performance of networks with a range of tied weights (and therefore weight agnostic). More details can be found in the paper which is published &lt;a href=&quot;https://papers.nips.cc/paper/8777-weight-agnostic-neural-networks&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1906.04358&quot;&gt;here&lt;/a&gt;, along with a &lt;a href=&quot;https://weightagnostic.github.io/&quot;&gt;website&lt;/a&gt;, a &lt;a href=&quot;https://ai.googleblog.com/2019/08/exploring-weight-agnostic-neural.html&quot;&gt;blog&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/brain-tokyo-workshop/tree/master/WANNRelease&quot;&gt;open-source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WANNs are shown to perform reasonably well on several reinforcement learning tasks even though they’re sparsely connected and use tied weights. 
The paper further demonstrates the effectiveness of WANNs in classifying MNIST handwritten digits by reformulating the classification task as a reinforcement learning problem. 
In particular, an ensemble of WANNs with tied weights performs as well as a standard neural network with thousands of parameters. 
And when trained with a black-box optimizer called PEPG&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, a single WANN is able to achieve a respectable test accuracy of 94.2%.&lt;/p&gt;

&lt;p&gt;I’m really excited about the paper: it not only speeds up neural architecture search by eliminating the inner optimization loop for weight training, but also brings to light the potential of sparse neural networks with minimal degrees of freedom in weights. I’m also curious that in the MNIST experiment, WANNs are trained with a black-box optimizer instead of the usual backpropagation even though the network architecture is fully differentiable. For this, the paper reports an interesting observation: training WANNs with backpropagation in the classification formulation does not fare as well as 
PEPG in the reinforcement learning formulation. Unfortunately, I wasn’t able to find more details about this observation, so I decided to test it out myself and present some preliminary results here.&lt;/p&gt;

&lt;h2 id=&quot;experiment-setup&quot;&gt;Experiment setup&lt;/h2&gt;
&lt;p&gt;Let me first describe my experiment setup.&lt;/p&gt;

&lt;p&gt;General setup:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dataset: MNIST256, a downsampled and preprocessed version of MNIST provided by the authors of the paper along with &lt;a href=&quot;https://github.com/google/brain-tokyo-workshop/tree/master/WANNRelease&quot;&gt;their code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WANN architecture: the same 1849-connection topology as used in the paper and provided by the authors (I’ll call it &lt;em&gt;MNIST-WANN&lt;/em&gt; in short)&lt;/li&gt;
  &lt;li&gt;I use &lt;a href=&quot;https://github.com/HIPS/autograd&quot;&gt;autograd&lt;/a&gt; to obtain gradients from MNIST-WANN&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optimizers:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Adam: learning rate=0.01, beta1=0.99 and beta2=0.999&lt;/li&gt;
  &lt;li&gt;SGD: learning rate=2.0, momentum=0.9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve only attempted to tune learning rates with all other hyperparameters set by default. The implementation of both optimizers is provided by the authors.&lt;/p&gt;

&lt;p&gt;Model training and evaluation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I train MNIST-WANN on the first 50000 samples in the training set, validate it on the remaining 10000 samples in the training set, and test it on the test set that contains 10000 samples&lt;/li&gt;
  &lt;li&gt;For each optimizer, I compute its results as averages of 5 runs with different random seeds unless otherwise specified&lt;/li&gt;
  &lt;li&gt;Loss function: cross-entropy loss&lt;/li&gt;
  &lt;li&gt;Weight initialization: He uniform initialization&lt;/li&gt;
  &lt;li&gt;Minibatch size: 128&lt;/li&gt;
  &lt;li&gt;Epochs: 10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m now ready to present my experiment results.&lt;/p&gt;

&lt;h2 id=&quot;accuracy&quot;&gt;Accuracy&lt;/h2&gt;

&lt;p&gt;The following plot shows the accuracy of Adam and SGD as training progresses:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/accuracy.png&quot; alt=&quot;Training/validation accuracy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above plot, the upper and lower boundaries of shadows represent the max and min accuracy at each epoch (over 5 runs), respectively. Compared to SGD, Adam enjoys more stability in training and validation accuracy. It appears that the trained MNIST-WANN is underfitting for both optimizers, however, and there seems to be room for improvement.&lt;/p&gt;

&lt;p&gt;I summarize the results of the 10th epoch in the table below.
As you can see, there is a gap between test accuracy of Adam/SGD and PEPG (94.2% as reported in the paper), though we should keep in mind that the MNIST-WANN trained by Adam/SGD is underfitting.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Optimizer&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Training&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Validation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Testing&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Adam&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.4%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.9%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.5%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SGD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;91.9%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;92.8%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;92.2%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;landscape-analysis&quot;&gt;Landscape analysis&lt;/h2&gt;

&lt;p&gt;I’m also curious about what the solution found by each optimizer looks like. More precisely, I’m interested in the shape of the loss surface around each solution. One simple approach for visualizing a loss surface is to plot a 2D contour described by the following equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(\alpha_1, \alpha_2; \sigma) = \cal{L}(\hat{x} + \sigma \alpha_1 \delta_1 + \sigma \alpha_2 \delta_2), \quad \delta_1, \delta_2 \sim \mathcal{N}(\mathrm{0},\mathit{I}),&lt;/script&gt;

&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\cal{L}&lt;/script&gt; is the objective value (cross-entropy loss in this case) computed on the training set,&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; is the point at which the contour plot is centered (the MNIST-WANN weight parameters optimized by PEPG, Adam or SGD),&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\alpha_1, \alpha_2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; are variables that control our “view” of the landscape (smaller absolute values lead to a smaller neigborhood around &lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; and a finer-grained landscape), and&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\delta_1, \delta_2&lt;/script&gt; are vectors for perturbing &lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; in constructing the landscape; they’re sampled independently from the zero-mean normal distribution with identity covariance matrix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Adam and SGD, I choose &lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; to be the weights at the 10th epoch of training from one run, and for PEPG I use the weights provided by the authors. I sample the vectors &lt;script type=&quot;math/tex&quot;&gt;\delta_1, \delta_2&lt;/script&gt; only once and fix them for all experiments. Below I plot the function &lt;script type=&quot;math/tex&quot;&gt;f(\alpha_1, \alpha_2; \sigma)&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;\alpha_1, \alpha_2 \in \{-1, -0.975, \ldots, 0, \ldots, 0.975, 1\}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\sigma \in \{0.1, 0.2, 0.3, 0.4\}&lt;/script&gt; for each of the three optimizers, by varying optimizers across columns and &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; across rows:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/landscape.png&quot; alt=&quot;Landscape&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The landscapes around solutions of all three optimizers look smooth at &lt;script type=&quot;math/tex&quot;&gt;\sigma=0.1, 0.2&lt;/script&gt;, with those for Adam and SGD taking shape of almost perfect ellipses. As &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; increases, the landscape for PEPG becomes more “rugged”, whereas those for Adam and SGD remain elliptical (though less perfect than at smaller &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt;’s). It is intriguing that, despite its irregular landscape shape, the solution of PEPG generalizes better than those of Adam and SGD.&lt;/p&gt;

&lt;h2 id=&quot;discussions&quot;&gt;Discussions&lt;/h2&gt;
&lt;p&gt;In this article, I’ve presented some preliminary results for training WANNs with Adam and SGD for classifying MNIST digits. Both optimizers do pretty well, though still falling short compared to PEPG used in the paper. I’ve also studied landscapes around solutions of PEPG/Adam/SGD, and shown that the PEPG solution has an irregular landscape around it while generalizing better.&lt;/p&gt;

&lt;p&gt;I think WANNs are very interesting and certainly deserve further exploration.
For now, the preliminary results shown above suggest that training of MNIST-WANN can be improved by running more epochs, tuning the momentum of SGD, and/or trying other optimizers such as RMSprop. It’d be also interesting to investigate why the PEPG solution produces the rugged landscape in contrast with Adam and SGD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgement&lt;/strong&gt;: I’d like to thank the authors of the paper for generously open-sourcing their code.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;PEPG used in the paper (also known as population-based REINFORCE therein) is a variant of the algorithm described in &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=A64D1AE8313A364B814998E9E245B40A?doi=10.1.1.180.7104&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;this paper&lt;/a&gt;, which in turn is a black-box optimizer for reinforcement learning. The paper uses an open-source implementation from &lt;a href=&quot;https://github.com/hardmaru/estool&quot;&gt;estool&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;It is possible to reimplement WANNs using standard neural network libraries such as PyTorch and Tensorflow. However, I find it most straightforward to use &lt;a href=&quot;https://github.com/HIPS/autograd&quot;&gt;autograd&lt;/a&gt; on top of the existing code: all I need to do is replace some “import numpy as np” statements by “import &lt;span class=&quot;blue&quot;&gt;autograd&lt;/span&gt;.numpy as np” along with minor tweaks. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Dec 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2019/12/28/training-wanns-with-backprop/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/12/28/training-wanns-with-backprop/</guid>
      </item>
    
      <item>
        <title>Update, Training Weight Agnostic Neural Networks with Backpropagation</title>
        <description>&lt;p&gt;&lt;ins&gt;&lt;em&gt;Updates (12/26/19)&lt;/em&gt;&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;After writing up this article, I couldn’t wait to run more tests with WANNs. And here I am to give an update.&lt;/p&gt;

&lt;p&gt;I’ve tried to train WANN for 20 more epochs (so 30 epochs in total). Below is the training progress over the 30 epochs.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/accuracy.30.png&quot; alt=&quot;Training/validation accuracy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I summarize the results for Adam at the 29th epoch (which achieves the best validation accuracy) and those for SGD at the 30th epoch, averaged over 5 runs:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Optimizer&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Training&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Validation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Testing&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Adam&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;94.2%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;94.4%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;94.0%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SGD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.0%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.6%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.2%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It appears that training WANN for more epochs with Adam does help to ameliorate the underfitting issue and improves the test accuracy to 94%, close to the 94.2% of PEPG reported by the WANN paper. The SGD-tuned WANN still underfits even after 30 epochs of training; on the other hand, the gap between training and validation accuracy narrows a bit, and the result becomes more stable after 20 epochs.&lt;/p&gt;

&lt;!--
Some math
$$\alpha_1$$

Here we go
statement:\$$ 5 + 5 $$

Here other
statement:\$$ f(\alpha_1, \alpha_2) = \cal{L}(\hat{x} + \alpha_1 \delta_1 + \alpha_2 \delta_2),$$

Accuracy plot image here:
{:refdef: style=&quot;text-align: center;&quot;}
![Training/validation accuracy](/assets/accuracy.png)
{: refdef}


Landscape image here:

![Landscape](/assets/landscape.png)
--&gt;
</description>
        <pubDate>Thu, 26 Dec 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2019/12/26/update/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/12/26/update/</guid>
      </item>
    
      <item>
        <title>Training Weight Agnostic Neural Networks with Backpropagation</title>
        <description>&lt;!--
## Intro
--&gt;

&lt;p&gt;The recent paper “&lt;a href=&quot;https://papers.nips.cc/paper/8777-weight-agnostic-neural-networks&quot;&gt;Weight Agnostic Neural Networks&lt;/a&gt;” by Gaier and Ha proposes a neural architecture search algorithm that evolves neural networks for solving learning tasks. The search algroithm is inspired by &lt;a href=&quot;http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf&quot;&gt;NEAT&lt;/a&gt;, a popular neuroevolution algorithm. But instead of searching for weight values and network topologies simultaneously as done in NEAT, the WANN evolution procedure searches only for network topologies. Each topology in the search phase is evaluated by the average performance of networks with a range of tied weights (and therefore weight agnostic). More details can be found in the paper which is published &lt;a href=&quot;https://papers.nips.cc/paper/8777-weight-agnostic-neural-networks&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1906.04358&quot;&gt;here&lt;/a&gt;, along with a &lt;a href=&quot;https://weightagnostic.github.io/&quot;&gt;website&lt;/a&gt;, a &lt;a href=&quot;https://ai.googleblog.com/2019/08/exploring-weight-agnostic-neural.html&quot;&gt;blog&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/brain-tokyo-workshop/tree/master/WANNRelease&quot;&gt;open-source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WANNs are shown to perform reasonably well on several reinforcement learning tasks even though they’re sparsely connected and use tied weights. 
The paper further demonstrates the effectiveness of WANNs in classifying MNIST handwritten digits by reformulating the classification task as a reinforcement learning problem. 
In particular, an ensemble of WANNs with tied weights performs as well as a standard neural network with thousands of parameters. 
And when trained with a black-box optimizer called PEPG&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, a single WANN is able to achieve a respectable test accuracy of 94.2%.&lt;/p&gt;

&lt;p&gt;I’m really excited about the paper: it not only speeds up neural architecture search by eliminating the inner optimization loop for weight training, but also brings to light the potential of sparse neural networks with minimal degrees of freedom in weights. I’m also curious that in the MNIST experiment, WANNs are trained with a black-box optimizer instead of the usual backpropagation even though the network architecture is fully differentiable. For this, the paper reports an interesting observation: training WANNs with backpropagation in the classification formulation does not fare as well as 
PEPG in the reinforcement learning formulation. Unfortunately, I wasn’t able to find more details about this observation, so I decided to test it out myself and present some preliminary results here.&lt;/p&gt;

&lt;h2 id=&quot;experiment-setup&quot;&gt;Experiment setup&lt;/h2&gt;
&lt;p&gt;Let me first describe my experiment setup.&lt;/p&gt;

&lt;p&gt;General setup:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dataset: MNIST256, a downsampled and preprocessed version of MNIST provided by the authors of the paper along with &lt;a href=&quot;https://github.com/google/brain-tokyo-workshop/tree/master/WANNRelease&quot;&gt;their code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WANN architecture: the same 1849-connection topology as used in the paper and provided by the authors (I’ll call it &lt;em&gt;MNIST-WANN&lt;/em&gt; in short)&lt;/li&gt;
  &lt;li&gt;I use &lt;a href=&quot;https://github.com/HIPS/autograd&quot;&gt;autograd&lt;/a&gt; to obtain gradients from MNIST-WANN&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optimizers:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Adam: learning rate=0.01, beta1=0.99 and beta2=0.999&lt;/li&gt;
  &lt;li&gt;SGD: learning rate=2.0, momentum=0.9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve only attempted to tune learning rates with all other hyperparameters set by default. The implementation of both optimizers is provided by the authors.&lt;/p&gt;

&lt;p&gt;Model training and evaluation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I train MNIST-WANN on the first 50000 samples in the training set, validate it on the remaining 10000 samples in the training set, and test it on the test set that contains 10000 samples&lt;/li&gt;
  &lt;li&gt;For each optimizer, I compute its results as averages of 5 runs with different random seeds unless otherwise specified&lt;/li&gt;
  &lt;li&gt;Loss function: cross-entropy loss&lt;/li&gt;
  &lt;li&gt;Weight initialization: He uniform initialization&lt;/li&gt;
  &lt;li&gt;Minibatch size: 128&lt;/li&gt;
  &lt;li&gt;Epochs: 10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m now ready to present my experiment results.&lt;/p&gt;

&lt;h2 id=&quot;accuracy&quot;&gt;Accuracy&lt;/h2&gt;

&lt;p&gt;The following plot shows the accuracy of Adam and SGD as training progresses:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/accuracy.png&quot; alt=&quot;Training/validation accuracy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above plot, the upper and lower boundaries of shadows represent the max and min accuracy at each epoch (over 5 runs), respectively. Compared to SGD, Adam enjoys more stability in training and validation accuracy. It appears that the trained MNIST-WANN is underfitting for both optimizers, however, and there seems to be room for improvement.&lt;/p&gt;

&lt;p&gt;I summarize the results of the 10th epoch in the table below.
As you can see, there is a gap between test accuracy of Adam/SGD and PEPG (94.2% as reported in the paper), though we should keep in mind that the MNIST-WANN trained by Adam/SGD is underfitting.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Optimizer&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Training&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Validation&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Testing&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Adam&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.4%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.9%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;93.5%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SGD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;91.9%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;92.8%&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;92.2%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;landscape-analysis&quot;&gt;Landscape analysis&lt;/h2&gt;

&lt;p&gt;I’m also curious about what the solution found by each optimizer looks like. More precisely, I’m interested in the shape of the loss surface around each solution. One simple approach for visualizing a loss surface is to plot a 2D contour described by the following equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(\alpha_1, \alpha_2; \sigma) = \cal{L}(\hat{x} + \sigma \alpha_1 \delta_1 + \sigma \alpha_2 \delta_2), \quad \delta_1, \delta_2 \sim \mathcal{N}(\mathrm{0},\mathit{I}),&lt;/script&gt;

&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\cal{L}&lt;/script&gt; is the objective value (cross-entropy loss in this case) computed on the training set,&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; is the point at which the contour plot is centered (the MNIST-WANN weight parameters optimized by PEPG, Adam or SGD),&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\alpha_1, \alpha_2&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; are variables that control our “view” of the landscape (smaller absolute values lead to a smaller neigborhood around &lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; and a finer-grained landscape), and&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\delta_1, \delta_2&lt;/script&gt; are vectors for perturbing &lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; in constructing the landscape; they’re sampled independently from the zero-mean normal distribution with identity covariance matrix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Adam and SGD, I choose &lt;script type=&quot;math/tex&quot;&gt;\hat{x}&lt;/script&gt; to be the weights at the 10th epoch of training from one run, and for PEPG I use the weights provided by the authors. I sample the vectors &lt;script type=&quot;math/tex&quot;&gt;\delta_1, \delta_2&lt;/script&gt; only once and fix them for all experiments. Below I plot the function &lt;script type=&quot;math/tex&quot;&gt;f(\alpha_1, \alpha_2; \sigma)&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;\alpha_1, \alpha_2 \in \{-1, -0.975, \ldots, 0, \ldots, 0.975, 1\}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\sigma \in \{0.1, 0.2, 0.3, 0.4\}&lt;/script&gt; for each of the three optimizers, by varying optimizers across columns and &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; across rows:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/landscape.png&quot; alt=&quot;Landscape&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The landscapes around solutions of all three optimizers look smooth at &lt;script type=&quot;math/tex&quot;&gt;\sigma=0.1, 0.2&lt;/script&gt;, with those for Adam and SGD taking shape of almost perfect ellipses. As &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; increases, the landscape for PEPG becomes more “rugged”, whereas those for Adam and SGD remain elliptical (though less perfect than at smaller &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt;’s). It is intriguing that, despite its irregular landscape shape, the solution of PEPG generalizes better than those of Adam and SGD.&lt;/p&gt;

&lt;h2 id=&quot;discussions&quot;&gt;Discussions&lt;/h2&gt;
&lt;p&gt;In this article, I’ve presented some preliminary results for training WANNs with Adam and SGD for classifying MNIST digits. Both optimizers do pretty well, though still falling short compared to PEPG used in the paper. I’ve also studied landscapes around solutions of PEPG/Adam/SGD, and shown that the PEPG solution has an irregular landscape around it while generalizing better.&lt;/p&gt;

&lt;p&gt;I think WANNs are very interesting and certainly deserve further exploration.
For now, the preliminary results shown above suggest that training of MNIST-WANN can be improved by running more epochs, tuning the momentum of SGD, and/or trying other optimizers such as RMSprop. It’d be also interesting to investigate why the PEPG solution produces the rugged landscape in contrast with Adam and SGD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgement&lt;/strong&gt;: I’d like to thank the authors of the paper for generously open-sourcing their code.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;PEPG used in the paper (also known as population-based REINFORCE therein) is a variant of the algorithm described in &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=A64D1AE8313A364B814998E9E245B40A?doi=10.1.1.180.7104&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;this paper&lt;/a&gt;, which in turn is a black-box optimizer for reinforcement learning. The paper uses an open-source implementation from &lt;a href=&quot;https://github.com/hardmaru/estool&quot;&gt;estool&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;It is possible to reimplement WANNs using standard neural network libraries such as PyTorch and Tensorflow. However, I find it most straightforward to use &lt;a href=&quot;https://github.com/HIPS/autograd&quot;&gt;autograd&lt;/a&gt; on top of the existing code: all I need to do is replace some “import numpy as np” statements by “import &lt;span class=&quot;blue&quot;&gt;autograd&lt;/span&gt;.numpy as np” along with minor tweaks. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 26 Dec 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2019/12/26/test/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/12/26/test/</guid>
      </item>
    
      <item>
        <title>Testing Pixyll</title>
        <description>&lt;p&gt;There is a significant amount of subtle, yet precisely calibrated, styling to ensure
that your content is emphasized while still looking aesthetically pleasing.&lt;/p&gt;

&lt;p&gt;All links are easy to &lt;a href=&quot;#&quot;&gt;locate and discern&lt;/a&gt;, yet don’t detract from the &lt;a href=&quot;#&quot;&gt;harmony
of a paragraph&lt;/a&gt;. The &lt;em&gt;same&lt;/em&gt; goes for italics and &lt;strong&gt;bold&lt;/strong&gt; elements. Even the the strikeout
works if &lt;del&gt;for some reason you need to update your post&lt;/del&gt;. For consistency’s sake,
&lt;ins&gt;The same goes for insertions&lt;/ins&gt;, of course.&lt;/p&gt;

&lt;h3 id=&quot;code-with-syntax-highlighting&quot;&gt;Code, with syntax highlighting&lt;/h3&gt;

&lt;p&gt;Here’s an example of some ruby code with line anchors.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# The most awesome of classes
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Awesome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EvenMoreAwesome&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates_presence_of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:something&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email_format: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;favorite_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'created awesomeness'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;email_format&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\S+@\S+\.\S+/&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.foobar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Named colors rule */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some JavaScript:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPresent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;is-present&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;doOtherStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m0 p0 bg-blue white&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;h1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;headings&quot;&gt;Headings!&lt;/h1&gt;

&lt;p&gt;They’re responsive, and well-proportioned (in &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;line-height&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size&lt;/code&gt;).
They also heavily rely on the awesome utility, &lt;a href=&quot;http://www.basscss.com/&quot;&gt;BASSCSS&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&quot;they-draw-the-perfect-amount-of-attention&quot;&gt;They draw the perfect amount of attention&lt;/h5&gt;

&lt;p&gt;This allows your content to have the proper informational and contextual hierarchy. Yay.&lt;/p&gt;

&lt;h3 id=&quot;there-are-lists-too&quot;&gt;There are lists, too&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Apples&lt;/li&gt;
  &lt;li&gt;Oranges&lt;/li&gt;
  &lt;li&gt;Potatoes&lt;/li&gt;
  &lt;li&gt;Milk&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Mow the lawn&lt;/li&gt;
  &lt;li&gt;Feed the dog&lt;/li&gt;
  &lt;li&gt;Dance&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;images-look-great-too&quot;&gt;Images look great, too&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1424573/3378137/abac6d7c-fbe6-11e3-8e09-55745b6a8176.png&quot; alt=&quot;desk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1424573/3378137/abac6d7c-fbe6-11e3-8e09-55745b6a8176.png&quot; alt=&quot;desk&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;there-are-also-pretty-colors&quot;&gt;There are also pretty colors&lt;/h3&gt;

&lt;p&gt;Also the result of &lt;a href=&quot;http://www.basscss.com/&quot;&gt;BASSCSS&lt;/a&gt;, you can &lt;span class=&quot;bg-dark-gray white&quot;&gt;highlight&lt;/span&gt; certain components
of a &lt;span class=&quot;red&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;mid-gray&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;orange&quot;&gt;classes&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I don’t recommend using blue, though. It looks like a &lt;span class=&quot;blue&quot;&gt;link&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes!&lt;/h3&gt;

&lt;p&gt;Markdown footnotes are supported, and they look great! Simply put e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;[^1]&lt;/code&gt; where you want the footnote to appear,&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and then add
the reference at the end of your markdown.&lt;/p&gt;

&lt;h3 id=&quot;stylish-blockquotes-included&quot;&gt;Stylish blockquotes included&lt;/h3&gt;

&lt;p&gt;You can use the markdown quote syntax, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; for simple quotes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis porta mauris.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, you need to inject html if you’d like a citation footer. I will be working on a way to
hopefully sidestep this inconvenience.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Antoine de Saint-Exupéry&quot;&gt;Antoine de Saint-Exupéry&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Tables represent tabular data and can be built using markdown syntax.  They are rendered responsively in Pixyll for a variety of screen widths.&lt;/p&gt;

&lt;p&gt;Here’s a simple example of a table:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Quantity&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Orange&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$0.99&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Pineapple&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$2.99&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Banana&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$0.39&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;$6.14&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt;A table must have a body of one or more rows, but can optionally also have a header or footer.&lt;/p&gt;

&lt;p&gt;The cells in a column, including the header row cell, can either be aligned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;left,&lt;/li&gt;
  &lt;li&gt;right or&lt;/li&gt;
  &lt;li&gt;center.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most inline text formatting is available in table cells, block-level formatting are not.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Default header&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Left header&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Center header&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Right header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Default&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Left&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Center&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;Bold italic&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monospace&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#&quot;&gt;link text&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;del&gt;Strikeout&lt;/del&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;ins&gt;Insertion&lt;ins&gt;&lt;/ins&gt;&lt;/ins&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;line&lt;br /&gt;break&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Smart quotes”&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;mark&gt;highlight&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;green&quot;&gt;green&lt;/span&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Footnote&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;sub&gt;subscript&lt;/sub&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;sup&gt;superscript&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;red&quot;&gt;red&lt;/span&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Footer row&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;h3 id=&quot;theres-more-being-added-all-the-time&quot;&gt;There’s more being added all the time&lt;/h3&gt;

&lt;p&gt;Checkout the &lt;a href=&quot;https://github.com/johnotander/pixyll&quot;&gt;Github repository&lt;/a&gt; to request,
or add, features.&lt;/p&gt;

&lt;p&gt;Happy writing.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Important information that may distract from the main text can go in footnotes. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Footnotes will work in tables since they’re just links. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 10 Jun 2019 08:31:19 -0400</pubDate>
        <link>http://localhost:4000/jekyll/pixyll/2019/06/10/test-pixyll-in-action/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/pixyll/2019/06/10/test-pixyll-in-action/</guid>
      </item>
    
      <item>
        <title>Guide to Forking Pixyll</title>
        <description>&lt;p&gt;The following is an overview to copying and sharing Pixyll.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Most people have an understanding of what the copyright and licensing obligations are for source code, but not everyone has practical experience.  There is a lot of information about how to use free and open source source code generally, but not necessarily how it works specifically.&lt;/p&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Pixyll is free and open source software under the MIT license, a &lt;em&gt;permissive license&lt;/em&gt;.  You can use Pixyll without charge and it is provided to you, “as is”, without warranty of any kind.&lt;/p&gt;

&lt;p&gt;These are some of the rights for Pixyll since it is under the MIT license:&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You can &lt;strong&gt;copy&lt;/strong&gt; Pixyll by forking it on GitHub or by any other means of copying.&lt;/li&gt;
  &lt;li&gt;You can &lt;strong&gt;use&lt;/strong&gt; Pixyll to publish your site without restriction or limitation.&lt;/li&gt;
  &lt;li&gt;You can &lt;strong&gt;change&lt;/strong&gt; Pixyll as you wish, and you can publish your site with a modified version of Pixyll.&lt;/li&gt;
  &lt;li&gt;You can also &lt;strong&gt;distribute&lt;/strong&gt; copies of Pixyll to other people.&lt;/li&gt;
  &lt;li&gt;You can also &lt;strong&gt;distribute modified&lt;/strong&gt; copies of Pixyll.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other rights you have of Pixyll under the MIT license:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can &lt;strong&gt;sell&lt;/strong&gt; copies of Pixyll, including copies you have modified.&lt;/li&gt;
  &lt;li&gt;You can &lt;strong&gt;combine&lt;/strong&gt; Pixyll with other works that are under the MIT license, or other permissive licenses, a copyleft license or a proprietary license.  Pixyll already does this itself by using Jekyll, Ruby and other dependencies.&lt;/li&gt;
  &lt;li&gt;You can distribute copies of Pixyll to others under either the MIT license or you can &lt;strong&gt;relicense&lt;/strong&gt; Pixyll under another license.  This includes a different permissive license, a copyleft license or a proprietary license.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your only responsibility is to preserve both the copyright notices of Pixyll and the MIT license in your copy or modified work.&lt;/p&gt;

&lt;h2 id=&quot;how-to&quot;&gt;How to&lt;/h2&gt;

&lt;p&gt;If you’ve modified Pixyll significantly and want to share your version, especially public copies of the code, then there are a few items you should do.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You should probably &lt;strong&gt;rename&lt;/strong&gt; your fork of Pixyll with a different name.&lt;/li&gt;
  &lt;li&gt;A new name isn’t required by the MIT license, but it is good etiquette.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;You should add your name to the &lt;strong&gt;copyright&lt;/strong&gt; of your version, and you should preserve the existing copyrights of Pixyll.&lt;/li&gt;
  &lt;li&gt;Maintaining the copyright notices isn’t required of the MIT license, but it is suggested by the license and is a good practice for documenting the copyrights of your derived work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The items above do not apply when you just copied and modified Pixyll in small ways to just publish your site and you have no plans to fork Pixyll under a different name.&lt;/p&gt;

&lt;p&gt;If you want to publish a fork of Pixyll under a different name but keeping it under the MIT license, then you should add your name to the copyright notices:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Copyright (c) 2019 Your Name
Copyright (c) 2014-2019 John Otander for Pixyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, if you want to publish a fork of Pixyll under a different name &lt;em&gt;and&lt;/em&gt; a different license, then you should should still add your name to the copyright notices but have a section titled “Pixyll” at the bottom of your LICENSE file that preserves the copyright and license notices for Pixyll:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Pixyll

Copyright (c) 2014-2019 John Otander

MIT License

Permission is hereby granted, [...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are just modifying Pixyll in small ways to customize your site, you are not obligated to maintain the copyright notices of Pixyll on your site.  However, if you want to credit the Pixyll theme that would be appreciated, see section on “Pixyll Plug” in the README file that came with Pixyll.&lt;/p&gt;

&lt;p&gt;Thanks for using Pixyll, and happy hacking!&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This material is for informational purposes only, and should not be construed as legal advice or opinion.  For actual legal advice, you should consult with professional legal services. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;This list of privileges are derived from the four freedoms of “The Free Software Definition” published by the GNU project &lt;a href=&quot;https://www.gnu.org/philosophy/free-sw.en.html&quot;&gt;https://www.gnu.org/philosophy/free-sw.en.html&lt;/a&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Using a different name from “Pixyll” for your derivate work helps avoid misdirected questions from people who are using your version.  It’s similar to using version numbers to discrimate the revisions of software when troubleshooting issues. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 26 Jan 2019 19:22:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/pixyll/2019/01/26/guide-to-forking-pixyll/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/pixyll/2019/01/26/guide-to-forking-pixyll/</guid>
      </item>
    
      <item>
        <title>Announcing Version 2.0</title>
        <description>&lt;p&gt;In an effort to make Pixyll easier to customize and more aesthetically pleasing, we’ve released version &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pixyll now features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Line anchors in code blocks and new syntax highlighting&lt;/li&gt;
  &lt;li&gt;A customizable variables file&lt;/li&gt;
  &lt;li&gt;Modular, and lighter weight CSS&lt;/li&gt;
  &lt;li&gt;No more &lt;code class=&quot;highlighter-rouge&quot;&gt;max-width&lt;/code&gt; media queries&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 11 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/jekyll/pixyll/2015/07/11/announcing-pixyll-version-2/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/pixyll/2015/07/11/announcing-pixyll-version-2/</guid>
      </item>
    
      <item>
        <title>Hello, Pixyll</title>
        <description>&lt;p&gt;Hello.&lt;/p&gt;

&lt;p&gt;Pixyll is a simple, beautiful theme for Jekyll that emphasizes content rather than aesthetic fluff. It’s mobile &lt;em&gt;first&lt;/em&gt;, fluidly responsive, and delightfully lightweight.&lt;/p&gt;

&lt;p&gt;It’s pretty minimal, but leverages large type and drastic contrast to make a statement, on all devices.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Antoine de Saint-Exupéry&quot;&gt;Antoine de Saint-Exupéry&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;where-is-it&quot;&gt;Where is it?&lt;/h2&gt;

&lt;p&gt;Checkout the &lt;a href=&quot;https://github.com/johnotander/pixyll&quot;&gt;Github repository&lt;/a&gt; to download it, request a feature, or report a bug.&lt;/p&gt;

&lt;p&gt;It’s free, and open source (&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;).&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jun 2014 11:31:19 -0400</pubDate>
        <link>http://localhost:4000/jekyll/pixyll/2014/06/11/welcome-to-pixyll/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/pixyll/2014/06/11/welcome-to-pixyll/</guid>
      </item>
    
      <item>
        <title>Pixyll in Action</title>
        <description>&lt;p&gt;There is a significant amount of subtle, yet precisely calibrated, styling to ensure
that your content is emphasized while still looking aesthetically pleasing.&lt;/p&gt;

&lt;p&gt;All links are easy to &lt;a href=&quot;#&quot;&gt;locate and discern&lt;/a&gt;, yet don’t detract from the &lt;a href=&quot;#&quot;&gt;harmony
of a paragraph&lt;/a&gt;. The &lt;em&gt;same&lt;/em&gt; goes for italics and &lt;strong&gt;bold&lt;/strong&gt; elements. Even the the strikeout
works if &lt;del&gt;for some reason you need to update your post&lt;/del&gt;. For consistency’s sake,
&lt;ins&gt;The same goes for insertions&lt;/ins&gt;, of course.&lt;/p&gt;

&lt;h3 id=&quot;code-with-syntax-highlighting&quot;&gt;Code, with syntax highlighting&lt;/h3&gt;

&lt;p&gt;Here’s an example of some ruby code with line anchors.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# The most awesome of classes
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Awesome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EvenMoreAwesome&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates_presence_of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:something&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email_format: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;favorite_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'created awesomeness'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;email_format&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\S+@\S+\.\S+/&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some CSS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.foobar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Named colors rule */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some JavaScript:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPresent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;is-present&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPresent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;doOtherStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s some HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m0 p0 bg-blue white&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;h1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;headings&quot;&gt;Headings!&lt;/h1&gt;

&lt;p&gt;They’re responsive, and well-proportioned (in &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;line-height&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size&lt;/code&gt;).
They also heavily rely on the awesome utility, &lt;a href=&quot;http://www.basscss.com/&quot;&gt;BASSCSS&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&quot;they-draw-the-perfect-amount-of-attention&quot;&gt;They draw the perfect amount of attention&lt;/h5&gt;

&lt;p&gt;This allows your content to have the proper informational and contextual hierarchy. Yay.&lt;/p&gt;

&lt;h3 id=&quot;there-are-lists-too&quot;&gt;There are lists, too&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Apples&lt;/li&gt;
  &lt;li&gt;Oranges&lt;/li&gt;
  &lt;li&gt;Potatoes&lt;/li&gt;
  &lt;li&gt;Milk&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Mow the lawn&lt;/li&gt;
  &lt;li&gt;Feed the dog&lt;/li&gt;
  &lt;li&gt;Dance&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;images-look-great-too&quot;&gt;Images look great, too&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1424573/3378137/abac6d7c-fbe6-11e3-8e09-55745b6a8176.png&quot; alt=&quot;desk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1424573/3378137/abac6d7c-fbe6-11e3-8e09-55745b6a8176.png&quot; alt=&quot;desk&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;there-are-also-pretty-colors&quot;&gt;There are also pretty colors&lt;/h3&gt;

&lt;p&gt;Also the result of &lt;a href=&quot;http://www.basscss.com/&quot;&gt;BASSCSS&lt;/a&gt;, you can &lt;span class=&quot;bg-dark-gray white&quot;&gt;highlight&lt;/span&gt; certain components
of a &lt;span class=&quot;red&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;mid-gray&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;orange&quot;&gt;classes&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;I don’t recommend using blue, though. It looks like a &lt;span class=&quot;blue&quot;&gt;link&lt;/span&gt;.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes!&lt;/h3&gt;

&lt;p&gt;Markdown footnotes are supported, and they look great! Simply put e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;[^1]&lt;/code&gt; where you want the footnote to appear,&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and then add
the reference at the end of your markdown.&lt;/p&gt;

&lt;h3 id=&quot;stylish-blockquotes-included&quot;&gt;Stylish blockquotes included&lt;/h3&gt;

&lt;p&gt;You can use the markdown quote syntax, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; for simple quotes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis porta mauris.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, you need to inject html if you’d like a citation footer. I will be working on a way to
hopefully sidestep this inconvenience.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
    Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.
  &lt;/p&gt;
  &lt;footer&gt;&lt;cite title=&quot;Antoine de Saint-Exupéry&quot;&gt;Antoine de Saint-Exupéry&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Tables represent tabular data and can be built using markdown syntax.  They are rendered responsively in Pixyll for a variety of screen widths.&lt;/p&gt;

&lt;p&gt;Here’s a simple example of a table:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Quantity&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Orange&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$0.99&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Pineapple&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$2.99&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Banana&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$0.39&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;$6.14&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt;A table must have a body of one or more rows, but can optionally also have a header or footer.&lt;/p&gt;

&lt;p&gt;The cells in a column, including the header row cell, can either be aligned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;left,&lt;/li&gt;
  &lt;li&gt;right or&lt;/li&gt;
  &lt;li&gt;center.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most inline text formatting is available in table cells, block-level formatting are not.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Default header&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Left header&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Center header&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Right header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Default&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Left&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Center&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Italic&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&lt;em&gt;Bold italic&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;monospace&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#&quot;&gt;link text&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;del&gt;Strikeout&lt;/del&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;ins&gt;Insertion&lt;ins&gt;&lt;/ins&gt;&lt;/ins&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;line&lt;br /&gt;break&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Smart quotes”&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;mark&gt;highlight&lt;/mark&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;green&quot;&gt;green&lt;/span&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Footnote&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;sub&gt;subscript&lt;/sub&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;sup&gt;superscript&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;span class=&quot;red&quot;&gt;red&lt;/span&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Footer row&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;h3 id=&quot;theres-more-being-added-all-the-time&quot;&gt;There’s more being added all the time&lt;/h3&gt;

&lt;p&gt;Checkout the &lt;a href=&quot;https://github.com/johnotander/pixyll&quot;&gt;Github repository&lt;/a&gt; to request,
or add, features.&lt;/p&gt;

&lt;p&gt;Happy writing.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Important information that may distract from the main text can go in footnotes. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Footnotes will work in tables since they’re just links. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 10 Jun 2014 08:31:19 -0400</pubDate>
        <link>http://localhost:4000/jekyll/pixyll/2014/06/10/see-pixyll-in-action/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/pixyll/2014/06/10/see-pixyll-in-action/</guid>
      </item>
    
      <item>
        <title>So, What is Jekyll?</title>
        <description>&lt;p&gt;Jekyll is a tool for transforming your plain text into static websites and 
blogs. It is simple, static, and blog-aware. Jekyll uses the 
&lt;a href=&quot;http://docs.shopify.com/themes/liquid-basics&quot;&gt;Liquid&lt;/a&gt; templating
language and has builtin &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;
and &lt;a href=&quot;http://en.wikipedia.org/wiki/Textile_(markup_language)&quot;&gt;Textile&lt;/a&gt; support.&lt;/p&gt;

&lt;p&gt;It also ties in nicely to &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Learn more about Jekyll on their &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jun 2014 08:32:18 -0400</pubDate>
        <link>http://localhost:4000/jekyll/pixyll/2014/06/09/so-what-is-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/pixyll/2014/06/09/so-what-is-jekyll/</guid>
      </item>
    
      <item>
        <title>Pixyll has Pagination</title>
        <description>&lt;p&gt;This is an empty post to illustrate the pagination component with Pixyll.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jun 2014 07:21:29 -0400</pubDate>
        <link>http://localhost:4000/jekyll/pixyll/2014/06/08/pixyll-has-pagination/</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/pixyll/2014/06/08/pixyll-has-pagination/</guid>
      </item>
    
  </channel>
</rss>
